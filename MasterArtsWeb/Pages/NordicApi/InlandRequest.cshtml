@page
@model MasterArtsWeb.Pages.NordicApi.InlandRequestModel
@{
}


<div class="lemon-2 contact adjusted-anchor-2" id="contact-id">

    INLAND

</div>
<div class="language-toggle text-end index-lang" style="display:none">
    <button id="languageToggleBtn" class="l-btn" onclick="toggleLanguage()">Svenska</button>
</div>
<div class="ban">
    <a href="/LogisticsCenter/ShipmentCalculator#contact-id" class="cta-button">Back</a>
</div>
<div class="master-master shipping-calculator-wrapper">
    <h3 id="resultSection"></h3>

    @if (Model.ApiResponseInland != null)
    {
        <div class="inland-details-section">
            <p class="detail-item"><strong>Total:</strong> @Model.ApiResponseInland.total</p>
            <p class="detail-item"><strong>USD Exchange Rate:</strong> @Model.ApiResponseInland.usdExchangeRate</p>
            <p class="detail-item"><strong>EUR Exchange Rate:</strong> @Model.ApiResponseInland.eurExchangeRate</p>
            <p class="detail-item"><strong>Currency:</strong> @Model.ApiResponseInland.currency</p>
            <p class="detail-item"><strong>Fuel Surcharge:</strong> @Model.ApiResponseInland.fuelSurcharge</p>
            <p class="detail-item"><strong>Fuel Surcharge Percentage:</strong> @Model.ApiResponseInland.fuelSurchargePercentage</p>
            <p class="detail-item"><strong>CO2:</strong> @Model.ApiResponseInland.co2</p>
            <p class="detail-item"><strong>Zip Code:</strong> @Model.ApiResponseInland.zipCode</p>
            <p class="detail-item"><strong>City:</strong> @Model.ApiResponseInland.city</p>
        </div>
    }
</div>


<form method="post" id="contactForm" style="margin-top:50px">
    <div class="form-container-4">
    
    <label for="ImportExportSelect">Import/Export</label>
    <select id="ImportExportSelect" name="Inland.ImportExport">
        <option value="import">Import</option>
        <option value="export">Export</option>
    </select>
    <div>
        <label id="moduleLabel" for="ModuleSelect">From</label>
        <select id="ModuleSelect" name="Inland.Module">
            <option value="ocean">Gothenburg</option>
        </select>
    </div>


    


        <div>
                <label asp-for="@Model.Inland.City">City</label>
                <input asp-for="@Model.Inland.City"/>
        </div>
        <div>
                <label asp-for="@Model.Inland.Weight">Weight</label>
                <input asp-for="@Model.Inland.Weight" type="number" />
        </div>
      
        <div class="form-col">
            <label asp-for="@Model.Inland.Volume">Total Volume (m³)</label>
            <input asp-for="@Model.Inland.Volume" type="number" step="0.01" value="0" readonly id="totalVolume" />
        </div>


           

        <label asp-for="@Model.Inland.Packages">Number Of Packages</label>
        <input type="number" asp-for="@Model.Inland.Packages" />
       
    </div>
        
            
            <!-- Displaying "LCL" as a text to the user, assuming "LCL" is the only option needed. -->
            
            <!-- Hidden input to ensure "LCL" is submitted as the value -->

        <input type="hidden" asp-for="@Model.Inland.Type" value="lcl" />
        <input type="hidden" asp-for="@Model.Inland.UserSelection" value="inlandtransport" />


   
       
        
        
    <!-- Fyll i fler fält enligt ovanstående mönster -->
    <div>
            
    </div>
    <div>
        

    </div>
    

        <div class="form-container-4">
   <h2 class="section-heading">Dimensions (Optional)</h2>


        <div id="dimensionsContainerEn">
            <div id="dimensionsContainer">
                <div>
                    <label asp-for="Inland.Dimensions[0].Pcs">Number Of Packages</label>
                    <input asp-for="ShippingRequest.Dimensions[0].Pcs" type="number" id="pcs" oninput="calculateVolume()" />
                </div>
                <div>
                    <label asp-for="Inland.Dimensions[0].Length">Length (cm)</label>
                    <input asp-for="Inland.Dimensions[0].Length" type="number" id="length" oninput="calculateVolume()" />
                </div>
                <div>
                    <label asp-for="Inland.Dimensions[0].Width">Width (cm)</label>
                    <input asp-for="Inland.Dimensions[0].Width" type="number" id="width" oninput="calculateVolume()" />
                </div>
                <div>
                    <label asp-for="Inland.Dimensions[0].Height">Height (cm)</label>
                    <input asp-for="ShippingRequest.Dimensions[0].Height" type="number" id="height" oninput="calculateVolume()" />
                </div>
                <div>
                    <label asp-for="Inland.Dimensions[0].Weight">Actual Weight (kg)</label>
                    <input asp-for="Inland.Dimensions[0].Weight" type="number" id="weight" oninput="calculateVolume()" />
                </div>
            </div>
            <div>
                <label asp-for="Inland.Dimensions[0].Stackable">Stackable</label>
                <select asp-for="Inland.Dimensions[0].Stackable">
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
        </div>

        <button type="button" class="cta-button" onclick="addDimension()">Add Dimension</button>

    <br>
    
    </div>
    <div class="sleep">
        <div id="loadingSpinner" style="display: none;">
            <div class="spinner"></div>
        </div>

        <button id="loginButton" onclick="startLoginProcess()" type="submit" class="cta-button text-center" style="margin-top:20px" name="OrderSubmitButton">Calculate</button>
    </div>
</form>


<form method="post" id="contactFormSv" style="margin-top:50px;display:none">
    <div class="form-container-2">
        <div>
            <label asp-for="@Model.Inland.Module">Transport Module</label>
            <select asp-for="@Model.Inland.Module">
                <option value="ocean">Ocean</option>

            </select>
        </div>
        <div>



            <div>
                <label asp-for="@Model.Inland.City">City</label>
                <input asp-for="@Model.Inland.City" />
            </div>
            <div>
                <label asp-for="@Model.Inland.Weight">Weight</label>
                <input asp-for="@Model.Inland.Weight" type="number" />
            </div>
            <div>
                <label asp-for="@Model.Inland.Volume">Volume (m³)</label>
                <input asp-for="@Model.Inland.Volume" type="number" step="0.01" />
            </div>



            <label asp-for="@Model.Inland.ImportExport">Import/Export</label>
            <select asp-for="@Model.Inland.ImportExport">
                <option value="import">Import</option>
                <option value="export">Export</option>
            </select>
        </div>


        <!-- Displaying "LCL" as a text to the user, assuming "LCL" is the only option needed. -->
        <!-- Hidden input to ensure "LCL" is submitted as the value -->

        <input type="hidden" asp-for="@Model.Inland.Type" value="lcl" />
        <input type="hidden" asp-for="@Model.Inland.UserSelection" value="inlandtransport" />






        <!-- Fyll i fler fält enligt ovanstående mönster -->
        <div>
            <label asp-for="@Model.Inland.Packages">Number Of Packages"</label>
            <input type="number" asp-for="@Model.Inland.Packages" />
        </div>
        <div>
        </div>
    </div>

    <div class="form-container-2">
        <h4>Dimensioner</h4>

        <div id="dimensionsContainerSv">
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Pcs">Antal stycken</label>
                <input asp-for="ShippingRequest.Dimensions[0].Pcs" type="number" />
            </div>
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Length">Längd</label>
                <input asp-for="ShippingRequest.Dimensions[0].Length" type="number" />
            </div>
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Width">Bredd</label>
                <input asp-for="ShippingRequest.Dimensions[0].Width" type="number" />
            </div>
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Height">Höjd</label>
                <input asp-for="ShippingRequest.Dimensions[0].Height" type="number" />
            </div>
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Weight">Vikt</label>
                <input asp-for="ShippingRequest.Dimensions[0].Weight" type="number" />
            </div>
            <div>
                <label asp-for="ShippingRequest.Dimensions[0].Stackable">Stackbar</label>
                <select asp-for="ShippingRequest.Dimensions[0].Stackable">
                    <option value="true">Ja</option>
                    <option value="false">Nej</option>
                </select>
            </div>
        </div>


        <button type="button" class="cta-button" onclick="addDimension()">Lägg till Dimension</button>

        <br>

    </div>
    <div class="sleep">
        <div id="loadingSpinner" style="display: none;">
            <div class="spinner"></div>
        </div>

        <button id="loginButton" onclick="startLoginProcess()" type="submit" class="cta-button text-center" style="margin-top:20px" name="OrderSubmitButton">Calculate</button>
    </div>
</form>





@section Scripts {
    <script>

        function calculateVolume() {
            const densityRatio = 1.6;
            const pcs = parseInt(document.getElementById('pcs').value) || 0;
            const length = parseFloat(document.getElementById('length').value) || 0;
            const width = parseFloat(document.getElementById('width').value) || 0;
            const height = parseFloat(document.getElementById('height').value) || 0;
            const actualWeight = parseFloat(document.getElementById('weight').value) || 0;

            const volume = (length * width * height) / 1000000; // Convert cubic cm to cubic meters
            const volumeWeight = volume * densityRatio * 1000; // Convert cubic meters to kg using density ratio

            const totalVolume = volume * pcs;
            const totalActualWeight = actualWeight * pcs;
            const totalVolumeWeight = volumeWeight * pcs;

            document.getElementById('totalVolume').value = totalVolume.toFixed(3);
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Hämtar referenser till dropdown för Import/Export och etiketten
            var importExportSelect = document.getElementById('ImportExportSelect');
            var moduleLabel = document.getElementById('moduleLabel');

            // Funktion för att uppdatera etiketten baserat på användarens val
            function updateModuleLabel() {
                if (importExportSelect.value === 'import') {
                    moduleLabel.textContent = 'From'; // Uppdaterar till "From" om användaren väljer "Import"
                } else if (importExportSelect.value === 'export') {
                    moduleLabel.textContent = 'To'; // Uppdaterar till "To" om användaren väljer "Export"
                }
            }

            // Använder en eventlyssnare för att kalla på updateModuleLabel när användaren ändrar sitt val
            importExportSelect.addEventListener('change', updateModuleLabel);

            // Kallar på funktionen direkt vid sidans laddning för att sätta korrekt etikett baserat på standardvalet
            updateModuleLabel();
        });






        $(document).ready(function () {
            // Iterera över varje p-element inuti din div och lägg till fade-in-klassen med en fördröjning
            $('.shipping-cost-calculator div p').each(function (i) {
                $(this).css('animation-delay', `${i * 0.2}s`); // 0.1s fördröjning mellan varje rad
                $(this).addClass('fade-in');
            });
        });

        function startLoginProcess() {
            document.getElementById('loadingSpinner').style.display = 'block';
            document.getElementById('loadingSpinner2').style.display = 'block';
            // Antag att `login` är funktionen som hanterar inloggningsprocessen.
            login().then(() => {
                document.getElementById('loadingSpinner').style.display = 'none';
            });
        }

        window.onload = function () {
            var resultSection = document.getElementById('resultSection');
            if (resultSection) {
                resultSection.scrollIntoView({ behavior: 'smooth' });
            }
        };

        function toggleLanguage() {
            var toggleBtn = document.getElementById('languageToggleBtn');
            var contactForm = document.getElementById('contactForm');
            var contactFormSv = document.getElementById('contactFormSv');

            if (toggleBtn.innerText === 'Svenska') {
                toggleBtn.innerText = 'English';
                contactForm.style.display = 'none';
                contactFormSv.style.display = 'block';
            } else {
                toggleBtn.innerText = 'Svenska';
                contactForm.style.display = 'block';
                contactFormSv.style.display = 'none';
            }
        }
        var dimensionIndex = 0;
        function addOption() {
            var container = document.getElementById('optionsContainer');
            var optionHTML = `
                <div id="option-${optionIndex}">
                    <select name="ShippingRequest.Options[${optionIndex}].Key">
                        <option value="vgm">VGM</option>
                        <option value="incoterms">Incoterms</option>
                        <!-- Lägg till fler fördefinierade nycklar här -->
                    </select>
                    <select name="ShippingRequest.Options[${optionIndex}].Value">
                        <option value="true">True</option>
                        <option value="false">False</option>
                        <!-- Specifika värden för Incoterms, exempelvis -->
                        <option value="dap">DAP</option>
                        <option value="exw">EXW</option>
                        <option value="fob">FOB</option>
                    </select>
                    <button type="button" class="cta-button" onclick="removeOption(${optionIndex})">Ta bort</button>
                </div>
            `;
            container.insertAdjacentHTML('beforeend', optionHTML);
            optionIndex++;
        }




        function addDimension() {
            var language = document.getElementById('languageToggleBtn').innerText;
            var isSwedish = language.includes('Svenska');

            var containerId = isSwedish ? 'dimensionsContainerEn' : 'dimensionsContainerSv';
            var container = document.getElementById(containerId);

            var placeholders = isSwedish ? {

                pcs: "Number of pieces",
                length: "Length",
                width: "Width",
                height: "Height",
                weight: "Weight",
                yes: "Yes",
                no: "No",
                removeBtn: "Remove"
                
                
            } : {
                pcs: "Antal stycken",
                length: "Längd",
                width: "Bredd",
                height: "Höjd",
                weight: "Vikt",
                yes: "Ja",
                no: "Nej",
                removeBtn: "Ta bort"
            };

            var dimensionHTML = `
                <div id="dimension-${dimensionIndex}">
                    <input type="number" name="ShippingRequest.Dimensions[${dimensionIndex}].Pcs" placeholder="${placeholders.pcs}" />
                    <input type="number" name="ShippingRequest.Dimensions[${dimensionIndex}].Length" placeholder="${placeholders.length}" />
                    <input type="number" name="ShippingRequest.Dimensions[${dimensionIndex}].Width" placeholder="${placeholders.width}" />
                    <input type="number" name="ShippingRequest.Dimensions[${dimensionIndex}].Height" placeholder="${placeholders.height}" />
                    <input type="number" name="ShippingRequest.Dimensions[${dimensionIndex}].Weight" placeholder="${placeholders.weight}" />
                    <select name="ShippingRequest.Dimensions[${dimensionIndex}].Stackable">
                        <option value="true">${placeholders.yes}</option>
                        <option value="false">${placeholders.no}</option>
                    </select>
                            <button type="button" class="cta-button"  onclick="removeDimension(${dimensionIndex})">${placeholders.removeBtn}</button>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', dimensionHTML);
            dimensionIndex++;
        }




        function removeDimension(index) {
            var elementToRemove = document.getElementById(`dimension-${index}`);
            if (elementToRemove) {
                elementToRemove.remove();
            }
        }
    </script>
}